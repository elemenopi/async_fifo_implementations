library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity fifo_mem_tb is
end fifo_mem_tb;

architecture behavior of fifo_mem_tb is
    -- Constants
    constant CLK_PERIOD: time := 10 ns;

    -- Signals
    signal clk: std_logic := '0';
    signal rst_n: std_logic := '0';
    signal wr: std_logic := '0';
    signal rd: std_logic := '0';
    signal data_in: std_logic_vector(7 downto 0) := (others => '0');
    signal data_out: std_logic_vector(7 downto 0);
    signal fifo_full: std_logic;
    signal fifo_empty: std_logic;
    signal fifo_threshold: std_logic;
    signal fifo_overflow: std_logic;
    signal fifo_underflow: std_logic;

    -- Component Declaration for the Unit Under Test (UUT)
    component fifo_mem
        port(
            data_out : out std_logic_vector(7 downto 0);
            fifo_full : out std_logic;
            fifo_empty : out std_logic;
            fifo_threshold : out std_logic;
            fifo_overflow : out std_logic;
            fifo_underflow : out std_logic;
            clk : in std_logic;
            rst_n : in std_logic;
            wr : in std_logic;
            rd : in std_logic;
            data_in : in std_logic_vector(7 downto 0)
        );
    end component;

begin
    -- Instantiate the Unit Under Test (UUT)
    dut: fifo_mem port map (
        data_out => data_out,
        fifo_full => fifo_full,
        fifo_empty => fifo_empty,
        fifo_threshold => fifo_threshold,
        fifo_overflow => fifo_overflow,
        fifo_underflow => fifo_underflow,
        clk => clk,
        rst_n => rst_n,
        wr => wr,
        rd => rd,
        data_in => data_in
    );

    -- Clock process to generate the clock
    clk_process: process
    begin
        for i in 1 to 20 loop  -- Simulate for 1000 clock cycles
            clk <= not clk;
            wait for CLK_PERIOD / 2;
        end loop;
        wait;
    end process clk_process;

    -- Stimulus process
    stim_proc: process
    begin
        rst_n <= '0';  -- Assert reset
        wait for CLK_PERIOD * 2;
        rst_n <= '1';  -- Deassert reset

        -- Write some data
        wr <= '1';
        data_in <= "00001111";
        wait for CLK_PERIOD;
        wr <= '0';

        -- Read data
        rd <= '1';
        wait for CLK_PERIOD;
        rd <= '0';

        -- Additional stimuli can be added here

        wait;
    end process stim_proc;

end behavior;
